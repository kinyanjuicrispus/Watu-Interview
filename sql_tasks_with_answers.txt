Must use:
- MySQL database
- db_schema.sql for DB creation

1.Task

Get numbers of vehicles sold (loans disbursed) in Jan and Feb 2020 per each vehicle make. 
a) Display only those makes where total sales are more than 1000 units

SELECT vm.name AS vehicle_make, COUNT(a.id) AS total_sales
FROM `loan-schema`.`m_loan` ml
JOIN `asset-schema`.`asset` a ON ml.id = a.m_loan_id
JOIN `asset-schema`.`vehicle_model` vm ON a.model_id = vm.id
JOIN `asset-schema`.`vehicle_make` vmake ON vm.vehicle_make_id = vmake.id
WHERE ml.disbursedon_date BETWEEN '2020-01-01' AND '2020-02-29'
GROUP BY vehicle_make
HAVING total_sales > 1000;

b) Display full sales data including all makes from database (including those where sales are not made)

SELECT vmake.name AS vehicle_make, 
       COUNT(a.id) AS total_sales
FROM `asset-schema`.`vehicle_make` vmake
LEFT JOIN `asset-schema`.`vehicle_model` vm ON vmake.id = vm.vehicle_make_id
LEFT JOIN `asset-schema`.`asset` a ON vm.id = a.model_id
LEFT JOIN `loan-schema`.`m_loan` ml ON a.m_loan_id = ml.id 
      AND ml.disbursedon_date BETWEEN '2020-01-01' AND '2020-02-29'
GROUP BY vehicle_make;


2. Task

Get current weekly payment amount for each loan. Table m_loan_repayment_schedule contains weekly payment records. Weekly payment record should be selected for the first week where obligations are not met (value for field completed_derived=0). Use principal_amount plus interest_amount to acquire weekly payment amount.

SELECT ml.id AS loan_id, 
       rs.principal_amount + rs.interest_amount AS weekly_payment
FROM `loan-schema`.`m_loan` ml
JOIN `loan-schema`.`m_loan_repayment_schedule` rs ON ml.id = rs.loan_id
WHERE rs.completed_derived = 0
ORDER BY rs.duedate
LIMIT 1;


3. Task

Calculate current balance (scheduled amount - payed amount) for each loan. Use tables m_loan_repayment_schedule for payment schedule data. Total scheduled payment amount on current date must be calculated by sum of all amount field values. Some values can be null. Payment data are stored in table m_loan_transaction.

SELECT ml.id AS loan_id,
       COALESCE(SUM(rs.principal_amount + rs.interest_amount + rs.fee_charges_amount + rs.penalty_charges_amount), 0) AS scheduled_amount,
       COALESCE(SUM(tr.amount), 0) AS paid_amount,
       (COALESCE(SUM(rs.principal_amount + rs.interest_amount + rs.fee_charges_amount + rs.penalty_charges_amount), 0) - 
        COALESCE(SUM(tr.amount), 0)) AS current_balance
FROM `loan-schema`.`m_loan` ml
LEFT JOIN `loan-schema`.`m_loan_repayment_schedule` rs ON ml.id = rs.loan_id AND rs.duedate <= CURDATE()
LEFT JOIN `loan-schema`.`m_loan_transaction` tr ON ml.id = tr.loan_id
GROUP BY ml.id;



